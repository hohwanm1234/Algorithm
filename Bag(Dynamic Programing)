import java.util.*;
class Main {
    public static void main(String[] args) {
        // 물품의 수 N - 1<= N <= 100
        // 무게 W  - 1 <= W <= 100000
        // 가치 V - 0 <= V <= 1000
        // 배낭의 최대 무게 K - 1<= K <= 100000

        // V합의 최댓값을 구하라
        // 물품1 4-7 / 물품2 6-13 / 물품3 4-8 / 물품4 3-6 / 물품5 5-12

        Scanner sc = new Scanner(System.in);

        int N = sc.nextInt(); // 물품의 갯수
        int K = sc.nextInt(); // 배낭의 최대 무게

        int[] V = new int[N+1]; // 물품의 가치
        int[] W = new int[N+1]; // 물품의 무게

        for(int i=1; i<=N; i++) {
            W[i] = sc.nextInt();
            V[i] = sc.nextInt();
        }
        System.out.println(bagPack(N, K, V, W));
    }

    /*
     * 2022-05-24 문호환
     * 가방 알고리즘 (Dynamic Programing)
     * @param N, K, V, W
     * @return max
     */
    public static int bagPack(int N, int K, int[]V, int[]W) {

        int max = 0;
        int[][] bp = new int[N+1][K+1]; // 가방(무게-가치/갯수) 2차원 배열

        for(int i=1; i<=N; i++) {
            for(int j=1; j<=K; j++) {
                if(W[i] <= j)
                    bp[i][j] = Math.max(V[i] + bp[i-1][j-W[i]], bp[i-1][j]);
                else
                    bp[i][j] = bp[i-1][j];

                max = Math.max(max, bp[i][j]);
            }
        }
        return max;
    }
}
